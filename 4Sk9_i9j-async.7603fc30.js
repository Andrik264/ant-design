(("undefined"!=typeof globalThis?globalThis:self).makoChunk_antd=("undefined"!=typeof globalThis?globalThis:self).makoChunk_antd||[]).push([["4Sk9_i9j"],{"4Sk9_i9j":function(a,e,d){"use strict";d.d(e,"__esModule",{value:!0}),d.d(e,"texts",{enumerable:!0,get:function(){return I;}}),d("Ceax3GbC");let I=[{value:"To input a value in a range.",paraId:0,tocIndex:0},{value:"Common props ref\uFF1A",paraId:1,tocIndex:14},{value:"Common props",paraId:2,tocIndex:14},{value:"Property",paraId:3,tocIndex:14},{value:"Description",paraId:3,tocIndex:14},{value:"Type",paraId:3,tocIndex:14},{value:"Default",paraId:3,tocIndex:14},{value:"Version",paraId:3,tocIndex:14},{value:"autoFocus",paraId:3,tocIndex:14},{value:"Whether get focus when component mounted",paraId:3,tocIndex:14},{value:"boolean",paraId:3,tocIndex:14},{value:"false",paraId:3,tocIndex:14},{value:"classNames",paraId:3,tocIndex:14},{value:"Semantic structure className",paraId:3,tocIndex:14},{value:"Record<SemanticDOM, string>",paraId:4,tocIndex:14},{value:"-",paraId:3,tocIndex:14},{value:"5.10.0",paraId:3,tocIndex:14},{value:"defaultValue",paraId:3,tocIndex:14},{value:"The default value of slider. When ",paraId:3,tocIndex:14},{value:"range",paraId:3,tocIndex:14},{value:" is false, use number, otherwise, use [number, number]",paraId:3,tocIndex:14},{value:"number | [number, number]",paraId:3,tocIndex:14},{value:"0 | [0, 0]",paraId:3,tocIndex:14},{value:"disabled",paraId:3,tocIndex:14},{value:"If true, the slider will not be intractable",paraId:3,tocIndex:14},{value:"boolean",paraId:3,tocIndex:14},{value:"false",paraId:3,tocIndex:14},{value:"keyboard",paraId:3,tocIndex:14},{value:"Support using keyboard to move handlers",paraId:3,tocIndex:14},{value:"boolean",paraId:3,tocIndex:14},{value:"true",paraId:3,tocIndex:14},{value:"5.2.0+",paraId:3,tocIndex:14},{value:"dots",paraId:3,tocIndex:14},{value:"Whether the thumb can drag over tick only",paraId:3,tocIndex:14},{value:"boolean",paraId:3,tocIndex:14},{value:"false",paraId:3,tocIndex:14},{value:"included",paraId:3,tocIndex:14},{value:"Make effect when ",paraId:3,tocIndex:14},{value:"marks",paraId:3,tocIndex:14},{value:" not null, true means containment and false means coordinative",paraId:3,tocIndex:14},{value:"boolean",paraId:3,tocIndex:14},{value:"true",paraId:3,tocIndex:14},{value:"marks",paraId:3,tocIndex:14},{value:"Tick mark of Slider, type of key must be ",paraId:3,tocIndex:14},{value:"number",paraId:3,tocIndex:14},{value:", and must in closed interval [min, max], each mark can declare its own style",paraId:3,tocIndex:14},{value:"object",paraId:3,tocIndex:14},{value:"{ number: ReactNode } | { number: { style: CSSProperties, label: ReactNode } }",paraId:3,tocIndex:14},{value:"max",paraId:3,tocIndex:14},{value:"The maximum value the slider can slide to",paraId:3,tocIndex:14},{value:"number",paraId:3,tocIndex:14},{value:"100",paraId:3,tocIndex:14},{value:"min",paraId:3,tocIndex:14},{value:"The minimum value the slider can slide to",paraId:3,tocIndex:14},{value:"number",paraId:3,tocIndex:14},{value:"0",paraId:3,tocIndex:14},{value:"range",paraId:3,tocIndex:14},{value:"Dual thumb mode",paraId:3,tocIndex:14},{value:"boolean",paraId:3,tocIndex:14},{value:"false",paraId:3,tocIndex:14},{value:"reverse",paraId:3,tocIndex:14},{value:"Reverse the component",paraId:3,tocIndex:14},{value:"boolean",paraId:3,tocIndex:14},{value:"false",paraId:3,tocIndex:14},{value:"step",paraId:3,tocIndex:14},{value:"The granularity the slider can step through values. Must greater than 0, and be divided by (max - min) . When ",paraId:3,tocIndex:14},{value:"step",paraId:3,tocIndex:14},{value:" is ",paraId:3,tocIndex:14},{value:"null",paraId:3,tocIndex:14},{value:" but exist ",paraId:3,tocIndex:14},{value:"marks",paraId:3,tocIndex:14},{value:", the valid point will only be the ",paraId:3,tocIndex:14},{value:"mark",paraId:3,tocIndex:14},{value:", ",paraId:3,tocIndex:14},{value:"min",paraId:3,tocIndex:14},{value:" and ",paraId:3,tocIndex:14},{value:"max",paraId:3,tocIndex:14},{value:"number | null",paraId:3,tocIndex:14},{value:"1",paraId:3,tocIndex:14},{value:"styles",paraId:3,tocIndex:14},{value:"Semantic structure style",paraId:3,tocIndex:14},{value:"Record<SemanticDOM, React.CSSProperties>",paraId:5,tocIndex:14},{value:"-",paraId:3,tocIndex:14},{value:"5.10.0",paraId:3,tocIndex:14},{value:"tooltip",paraId:3,tocIndex:14},{value:"The tooltip relate props",paraId:3,tocIndex:14},{value:"tooltip",paraId:6,tocIndex:14},{value:"-",paraId:3,tocIndex:14},{value:"4.23.0",paraId:3,tocIndex:14},{value:"value",paraId:3,tocIndex:14},{value:"The value of slider. When ",paraId:3,tocIndex:14},{value:"range",paraId:3,tocIndex:14},{value:" is false, use number, otherwise, use [number, number]",paraId:3,tocIndex:14},{value:"number | [number, number]",paraId:3,tocIndex:14},{value:"-",paraId:3,tocIndex:14},{value:"vertical",paraId:3,tocIndex:14},{value:"If true, the slider will be vertical",paraId:3,tocIndex:14},{value:"boolean",paraId:3,tocIndex:14},{value:"false",paraId:3,tocIndex:14},{value:"onChangeComplete",paraId:3,tocIndex:14},{value:"Fire when ",paraId:3,tocIndex:14},{value:"mouseup",paraId:3,tocIndex:14},{value:" or ",paraId:3,tocIndex:14},{value:"keyup",paraId:3,tocIndex:14},{value:" is fired",paraId:3,tocIndex:14},{value:"(value) => void",paraId:3,tocIndex:14},{value:"-",paraId:3,tocIndex:14},{value:"onChange",paraId:3,tocIndex:14},{value:"Callback function that is fired when the user changes the slider's value",paraId:3,tocIndex:14},{value:"(value) => void",paraId:3,tocIndex:14},{value:"-",paraId:3,tocIndex:14},{value:"Property",paraId:7,tocIndex:15},{value:"Description",paraId:7,tocIndex:15},{value:"Type",paraId:7,tocIndex:15},{value:"Default",paraId:7,tocIndex:15},{value:"Version",paraId:7,tocIndex:15},{value:"draggableTrack",paraId:7,tocIndex:15},{value:"Whether range track can be drag",paraId:7,tocIndex:15},{value:"boolean",paraId:7,tocIndex:15},{value:"false",paraId:7,tocIndex:15},{value:"4.10.0",paraId:7,tocIndex:15},{value:"Property",paraId:8,tocIndex:16},{value:"Description",paraId:8,tocIndex:16},{value:"Type",paraId:8,tocIndex:16},{value:"Default",paraId:8,tocIndex:16},{value:"Version",paraId:8,tocIndex:16},{value:"autoAdjustOverflow",paraId:8,tocIndex:16},{value:"Whether to automatically adjust the popup position",paraId:8,tocIndex:16},{value:"boolean",paraId:8,tocIndex:16},{value:"true",paraId:8,tocIndex:16},{value:"5.8.0",paraId:8,tocIndex:16},{value:"open",paraId:8,tocIndex:16},{value:"If true, Tooltip will show always, or it will not show anyway, even if dragging or hovering",paraId:8,tocIndex:16},{value:"boolean",paraId:8,tocIndex:16},{value:"-",paraId:8,tocIndex:16},{value:"4.23.0",paraId:8,tocIndex:16},{value:"placement",paraId:8,tocIndex:16},{value:"Set Tooltip display position. Ref ",paraId:8,tocIndex:16},{value:"Tooltip",paraId:9,tocIndex:16},{value:"string",paraId:8,tocIndex:16},{value:"-",paraId:8,tocIndex:16},{value:"4.23.0",paraId:8,tocIndex:16},{value:"getPopupContainer",paraId:8,tocIndex:16},{value:"The DOM container of the Tooltip, the default behavior is to create a div element in body",paraId:8,tocIndex:16},{value:"(triggerNode) => HTMLElement",paraId:8,tocIndex:16},{value:"() => document.body",paraId:8,tocIndex:16},{value:"4.23.0",paraId:8,tocIndex:16},{value:"formatter",paraId:8,tocIndex:16},{value:"Slider will pass its value to ",paraId:8,tocIndex:16},{value:"formatter",paraId:8,tocIndex:16},{value:", and display its value in Tooltip, and hide Tooltip when return value is null",paraId:8,tocIndex:16},{value:"value => ReactNode | null",paraId:8,tocIndex:16},{value:"IDENTITY",paraId:8,tocIndex:16},{value:"4.23.0",paraId:8,tocIndex:16},{value:"Name",paraId:10,tocIndex:17},{value:"Description",paraId:10,tocIndex:17},{value:"Version",paraId:10,tocIndex:17},{value:"blur()",paraId:10,tocIndex:17},{value:"Remove focus",paraId:10,tocIndex:17},{value:"focus()",paraId:10,tocIndex:17},{value:"Get focus",paraId:10,tocIndex:17}];}}]);
//# sourceMappingURL=4Sk9_i9j-async.7603fc30.js.map